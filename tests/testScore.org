* Binary outcome
** riskRegression vs ModelGood

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(lava)
library(riskRegression)
library(ModelGood)
library(data.table)
library(testthat)
library(rms)
N <- 300
M <- 200
set.seed(18)
train.d <- sampleData(N,outcome="binary")
test.d <- sampleData(M,outcome="binary")
f1 <- glm(Y~X1+X2+X6+X8,data=train.d,family=binomial)
f2 <- lrm(Y~X1+X2+X9,data=train.d)
f3 <- lrm(Y~X6,data=train.d)
a <- Score(list(f1,f2,f3),data=test.d,formula=Y~1,metrics=c("Brier","auc"),conf.int=FALSE,null.model=FALSE)
library(ModelGood)
## v <- Brier(list(f1,f2,f3),data=test.d,split.method="none",verbose=FALSE)
v <- Roc(list(f1,f2,f3),data=test.d,split.method="none",verbose=FALSE)
x <- cbind(Auc=unlist(v$Auc),Brier=unlist(v$Brier))
y <- cbind(Auc=a$AUC$score[,AUC],Brier=a$Brier$score[,Brier])
rownames(y) <- rownames(x)
expect_equal(x,y)
expect_equal(predictRisk(f1,newdata=test.d),
             as.numeric(predictStatusProb(f1,newdata=test.d)))
# daimres <- Daim::deLong.test(data.frame(R1=predictRisk(f1,newdata=test.d),
                                        # R2=predictRisk(f2,newdata=test.d),R3=predictRisk(f3,newdata=test.d)), labels=test.d$Y, labpos="1")
# z <- daimres$AUC[,1]
#+END_SRC

** ROC plot

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(lava)
library(riskRegression)
library(ModelGood)
library(data.table)
library(rms)
N <- 300
M <- 200
set.seed(18)
train.d <- sampleData(N,outcome="binary")
test.d <- sampleData(M,outcome="binary")
f1 <- glm(Y~X1+X2+X6+X8,data=train.d,family=binomial)
f2 <- lrm(Y~X1+X2+X9,data=train.d)
f3 <- lrm(Y~X6,data=train.d)
Source(riskRegression);testr <- Score(list(f1,f2,f3),data=test.d,formula=Y~1,metrics=c("Brier","auc"),test=FALSE,null.model=FALSE)
plot.score.ROC(testr)
#+END_SRC

* Survival outcome
** Score vs timeROC

*** With ties

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(lava)
library(data.table)
library(prodlim)
library(ModelGood)
library(timeROC)
library(riskRegression)
library(testthat)
library(pec)
library(rms)
set.seed(19)
N <- 300
M <- 2000
m <- lvm()
train.d <- SimSurv(N)
test.d <- SimSurv(M)
test.d$time <- round(test.d$time,1)
f12 <- coxph(Surv(time,status)~X1+X2,data=train.d)
test.d$X2 <- abs(round(test.d$X2,2))
## Source(riskRegression)
Rscoretime <- system.time(Rscore <- Score(list(test.d$X2),data=test.d,formula=Surv(time,status)~1,times=5,metrics=c("AUC"),null.model=FALSE,test=TRUE))
tROCtime <- system.time(tROC <- with(test.d,timeROC(T=time,delta=status,marker=X2,times=5,cause=1,iid=TRUE)))
print(rbind(c(Package="timeROC",timeROC.AUC=tROC$AUC[[2]],
              timeROC.seAUC=tROC$inference$vect_sd_1[[2]]),
            c(Package="riskRegression",Rscore$AUC$score[,c("AUC"=AUC,"se"=se)])))
cbind(timeROC.time=tROCtime[[1]],Rscore.time=Rscoretime[[1]])
expect_equal(tROC$AUC[[2]],Rscore$AUC$score[,AUC])
#+END_SRC   

*** Without ties

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(lava)
library(data.table)
library(prodlim)
library(ModelGood)
library(timeROC)
library(pec)
library(rms)
library(riskRegression)
set.seed(19)
N <- 300
M <- 2000
m <- lvm()
train.d <- SimSurv(N)
test.d <- SimSurv(M)
## test.d$time <- round(test.d$time,1)
f12 <- coxph(Surv(time,status)~X1+X2,data=train.d)
test.d$X2 <- abs(round(test.d$X2,2))
## Source(riskRegression)
Rscoretime <- system.time(Rscore <- Score(list(test.d$X2),data=test.d,formula=Surv(time,status)~1,times=5,metrics=c("AUC"),null.model=FALSE,test=TRUE))
tROCtime <- system.time(tROC <- with(test.d,timeROC(T=time,delta=status,marker=X2,times=5,cause=1,iid=TRUE)))
print(rbind(c(Package="timeROC",timeROC.AUC=tROC$AUC[[2]],
              timeROC.seAUC=tROC$inference$vect_sd_1[[2]]),
            c(Package="riskRegression",Rscore$AUC$score[,c("AUC"=AUC,"se"=se)])))
cbind(timeROC.time=tROCtime[[1]],Rscore.time=Rscoretime[[1]])
#+END_SRC   

** Score versus timeROC::compare

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(lava)
library(data.table)
library(prodlim)
library(ModelGood)
library(timeROC)
library(pec)
library(rms)
Source(riskRegression,silent=TRUE)
Source(timeROC,silent=TRUE)
set.seed(19)
N <- 300
M <- 300
m <- lvm()
train.d <- SimSurv(N)
test.d <- SimSurv(M)
f12 <- coxph(Surv(time,status)~X1+X2,data=train.d)
f2 <- coxph(Surv(time,status)~X2,data=train.d)
test.d$X2 <- abs(round(test.d$X2,2))
system.time({
                p12 <- with(test.d,timeROC(T=time,delta=status,marker=-predictRisk(f12,times=5,newdata=test.d),times=5,cause=1,iid=TRUE));
                p2 <- with(test.d,timeROC(T=time,delta=status,marker=X2,times=5,cause=1,iid=TRUE));
                print(compare(p2,p12))})
system.time(Rscore <- Score(list(f12,test.d$X2),data=test.d,formula=Surv(time,status)~1,times=c(5,10),metrics=c("AUC")))
Rscore
#+END_SRC

** Paul's Webappendix vs Score

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(prodlim)
library(data.table)
library(rms)
library(pec)
library(survival)
Source(riskRegression,silent=TRUE)
source("~/research/tmp/Data-and-R-code/Rcode/Rfunctions/BS.R")
source("~/research/tmp/Data-and-R-code/Rcode/Rfunctions/ComputeiidKM.R")
set.seed(27)
train <- SimSurv(100)
d <- SimSurv(4000)
f12 <- cph(Surv(time,status)~X1+X2,data=train,surv=TRUE)
p <- 1-predictRisk(f12,newdata=d,times=5)
system.time(a <- BS(timepoints=5,d$time,d$status,p,cause=1,compute.iid=TRUE))
system.time(b <- Score(list(p),formula=Surv(time,status)~1,times=5,data=d,metrics="Brier"))
print(cbind(TROC.BS=a$BS,TROC.se=a$sd))
print(b)
#+END_SRC

*** pbc data
    
#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
    library(survival)
    library(riskRegression)
    library(pec)
    library(rms)
    data(pbc)
    pbc <- na.omit(pbc)
    a <- cph(Surv(time,status!=0)~age+edema+sex+log(bili),data=pbc,surv=TRUE)
    b <- cph(Surv(time,status!=0)~age+edema+sex+log(bili)+log(protime)+log(albumin),data=pbc,surv=TRUE)
    set.seed(17)
    sc <- Score(list(a,b),data=pbc,formula=Surv(time,status!=1)~1,times=c(1000),metrics=c("brier","auc"),null.model=FALSE,split.method="bootcv",B=2)
    r <- pec(list(a,b),data=pbc,start=NULL,Surv(time,status!=1)~1,times=c(100,500,1000),exact=FALSE)
    u <- with(pbc,timeROC(T=time,delta=status!=0,marker=1-predictRisk(a,times=1500,newdata=pbc),cause=1,times=1500,iid=TRUE))
    u2 <- with(pbc,timeROC(T=time,delta=status!=0,marker=1-predictRisk(b,times=1500,newdata=pbc),cause=1,times=c(1500)))
    v <- Score(list(a,b),data=pbc,formula=Surv(time,status!=0)~1,times=c(500,1500),metrics=c("AUC"))
    u
    v
#+END_SRC

** Mini data set for debugging
*** without ties in event times
#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(timeROC)
mini <- data.frame(time=c(4,2,3,6,7),status=c(1,0,1,1,1),X2=c(-.1,0.1,-0.03,0.04,0.3),X1=c(7,1,9,4,2))
library(riskRegression)
Score(list(mini$X1,mini$X2),data=mini,formula=Surv(time,status)~1,times=c(3.4),metrics="AUC")
with(mini,timeROC(T=time,delta=status,marker=X1,cause=1,times=3.4))
with(mini,timeROC(T=time,delta=status,marker=X2,cause=1,times=3.4,iid=TRUE))
#+END_SRC

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
ttt <- seq(1,10)
set.seed(899)
train.d <- SimSurv(300)
train.d <- train.d[order(train.d$time,-train.d$status),]
testauc <- Score(list(train.d$X2),data=train.d,times=ttt,metrics="AUC",cens.model="marginal",split.method="none",formula=Surv(time,status)~1)
troc <- with(train.d,timeROC(T=time,delta=status,marker=X2,cause=1,times=ttt))
plot(troc$times,troc$AUC,lwd=7,col=2,xlim=range(troc$times),ylim=c(0.5,1),type="b")
plot(testauc$AUC,add=TRUE,models="numeric",type="b")
#+END_SRC

*** with ties in event times

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
## debug(riskRegression:::getInfluenceCurve.AUC.survival)
Source(timeROC);Source(riskRegression)
mini <- data.frame(time=c(4,2,3,3,7),status=c(1,0,1,1,1),X2=c(-.1,0.1,-0.03,0.04,0.3),X1=c(7,1,9,4,2))
mini <- mini[order(mini$time),]
## Browse[1]> MatInt0TcidhatMCksurEff
  ## M_{C_1} M_{C_2} M_{C_3} M_{C_4} M_{C_5}
## 2     0.8    -0.2    -0.2    -0.2    -0.2
## 3     0.8    -0.2    -0.2    -0.2    -0.2
## 3     0.8    -0.2    -0.2    -0.2    -0.2
## 4     0.8    -0.2    -0.2    -0.2    -0.2
## 7     0.8    -0.2    -0.2    -0.2    -0.2
## Browse[1]> Q
## > Called from: getInfluenceCurve.AUC.survival(t = times[1], n = N, time = time, 
    ## risk = risk, Cases = Cases, Controls = Controls, ipcwControls = ipcwControls, 
    ## ipcwCases = ipcwCases, MC = MC)
## Browse[1]> MC
     ## [,1] [,2] [,3] [,4] [,5]
## [1,]  0.8 -0.2 -0.2 -0.2 -0.2
## [2,]  0.8 -0.2 -0.2 -0.2 -0.2
## [3,]  0.8 -0.2 -0.2 -0.2 -0.2
## [4,]  0.8 -0.2 -0.2 -0.2 -0.2
a1 <- Score(list(mini$X1),data=mini,formula=Surv(time,status)~1,times=c(3.4),metrics="AUC",compare=FALSE,null.model=FALSE)
b1 <- with(mini,timeROC(T=time,delta=status,marker=X1,cause=1,times=3.4,iid=TRUE))
#+END_SRC



#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(survival)
library(timeROC)
library(riskRegression)
mini <- data.frame(time=c(4,2,3,3,7),status=c(1,0,1,1,1),X2=c(-.1,0.1,-0.03,0.04,0.3),X1=c(7,1,9,4,2))
mini <- mini[order(mini$time),]
a <- Score(list(mini$X1,mini$X2),data=mini,formula=Surv(time,status)~1,times=c(3.4),metrics="AUC",compare=FALSE,null.model=FALSE)
a1 <- Score(list(mini$X1),data=mini,formula=Surv(time,status)~1,times=c(3.4),metrics="AUC",compare=FALSE,null.model=FALSE)
b1 <- with(mini,timeROC(T=time,delta=status,marker=X1,cause=1,times=3.4,iid=TRUE))
##       Cases Survivors Censored AUC (%)    se
## t=3.4     2         2        1      75 27.95
b2 <- with(mini,timeROC(T=time,delta=status,marker=X2,cause=1,times=3.4,iid=TRUE))
##       Cases Survivors Censored AUC (%)    se
## t=3.4     2         2        1      50 39.53
cbind(AUC.Score=a$AUC$score[,AUC],AUC.timeROC=c(b1$AUC[2],b2$AUC[2]))
cbind(seAUC.Score=a$AUC$score[,se],seAUC.timeROC=c(b1$inference$vect_sd_1[[2]],b2$inference$vect_sd_1[[2]]))
#+END_SRC

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
with(mini,riskRegression:::getInfluenceCurve.KM(time,status))
with(mini,timeROC:::Compute.iid.KM(time,status))
#+END_SRC

** Cox model, cross-validation
#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes
library(riskRegression)
set.seed(899)
train.d <- SimSurv(300)
train.d <- train.d[order(train.d$time,-train.d$status),]
library(rms)
f2 <- cph(Surv(time,status)~X2,data=train.d,surv=TRUE)
f2a <- cph(Surv(time,status)~X2+X1,data=train.d,surv=TRUE)
ttt <- c(2,4,8)
cv.brier <- Score(list(f2a),data=train.d,times=ttt,metrics="Brier",cens.model="marginal",split.method="bootcv",B=3,formula=Surv(time,status)~1)
cv.auc <- Score(list(f2a),data=train.d,times=ttt,metrics="AUC",cens.model="marginal",split.method="bootcv",B=3,formula=Surv(time,status)~1)
cv.both <- Score(list(f2,f2a),data=train.d,times=ttt,metrics=c("auC","briEr"),cens.model="marginal",split.method="bootcv",B=3,formula=Surv(time,status)~1)
plot(cv.both$AUC,type="b")
#+END_SRC

** iid KM vs timeROC
   
#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(timeROC)
library(prodlim)
library(riskRegression)
d <- SimSurv(2000)
d <- d[order(d$time,-d$status),]
system.time(x <- riskRegression:::getInfluenceCurve.KM(d$time,d$status))
system.time(y <- timeROC:::Compute.iid.KM(d$time,d$status))
all.equal(x,y)
#+END_SRC

** plot time-dependent AUC

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes
library(lava)
library(riskRegression)
set.seed(19)
N <- 500
M <- 200
trainS <- sampleData(N,outcome="survival")
testS <- sampleData(M,outcome="survival")
c1 <- coxph(Surv(time,event)~X1+X2+X6+X8,data=trainS,x=TRUE)
c2 <- coxph(Surv(time,event)~X1+X2+X9,data=trainS,x=TRUE)
c3 <- coxph(Surv(time,event)~X6,data=trainS,x=TRUE)
## plot(prodlim(Hist(time,event)~1,data=testS))
ascore <- Score(list(c1,c2,c3),data=testS,formula=Surv(time,event)~1,times=3:18,metrics=c("AUC"),null.model=FALSE,dolist=NULL,summary=NULL,plots=NULL)
plotAUC(ascore)
#+END_SRC   

* Competing risks

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(riskRegression)
library(timeROC)
library(rms)
ex <- data.frame(time=c(1.3,2.5,1,4,2,3,6,7,9),status=c(1,1,2,1,0,2,1,2,1),X1=c(5,7,8,1,1,3,4,3,0),X2=c(2,9,8,1,1,3,4,3,0))
with(ex,timeROC(T=time,delta=status,marker=X1,cause=1,times=4.1,iid=TRUE))
Score(list(ex$X1),data=ex,formula=Hist(time,status)~1,times=4.1,metrics="aUc",null.model=FALSE)
## 
with(ex,timeROC(T=time,delta=status,marker=X2,cause=1,times=4.1,iid=TRUE))
Score(list(ex$X2),data=ex,formula=Hist(time,status)~1,times=4.1,metrics="aUc",null.model=FALSE)
#+END_SRC

** Brier score competing risks: Paul's Webappendix vs Score

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(prodlim)
library(data.table)
library(rms)
library(riskRegression)
library(pec)
library(survival)
source("~/research/tmp/Data-and-R-code/Rcode/Rfunctions/BS.R")
source("~/research/tmp/Data-and-R-code/Rcode/Rfunctions/ComputeiidKM.R")
source("~/research/SoftWare/pec/R/ipcw.R")
set.seed(27)
train <- prodlim::SimCompRisk(100)
d <- prodlim::SimCompRisk(4)
d <- d[,-c(1:3,8)]
d$time <- round(d$time)
d$X2 <- round(d$X2)
f <- CSC(Hist(time,event)~X1+X2,data=train)
p <- predictEventProb(f,newdata=d,times=5,cause=1)
system.time(a <- BS(timepoints=5,d$time,d$event,p,cause=1,compute.iid=TRUE))
system.time(b <- Score(list(p),formula=Hist(time,event)~1,times=5,data=d,metrics="Brier",null.model=FALSE))
print(cbind(TROC=c(BS=a$BS,se=a$sd),Score=b$Brier$score[,c(Brier,se)]))
#+END_SRC

** Retrospective risk assessment: risk difference conditional on outcome

#+BEGIN_SRC R  :results output raw drawer  :exports results  :session *R* :cache yes 
library(prodlim)
library(riskRegression)
library(data.table)
library(rms)
library(pec)
library(survival)
set.seed(27)
train <- prodlim::SimCompRisk(100)
library(riskRegression)
f12 <- CSC(Hist(time,event)~X1+X2,data=train)
f1 <- CSC(Hist(time,event)~X1,data=train)
Source(riskRegression,silent=TRUE)
u <- Score(list(f12,f1),formula=Hist(time,event)~1,summary="riskQuantile",null.model=FALSE,data=train)
#+END_SRC   
